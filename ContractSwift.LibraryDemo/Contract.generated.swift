//
// This is a generated file, do not edit!
// Generated by Contractswift, see https://github.com/daisuke310vvv/ContractSwift.git
//

import Foundation
import ContractSwift_Library
import CryptoSwift

struct Contract {
enum Function {
case name
case approve(Address, BInt)
case totalSupply
case transferFrom(Address, Address, BInt)
case decimals
case decreaseApproval(Address, BInt)
case balanceOf(Address)
case symbol
case transfer(Address, BInt)
case increaseApproval(Address, BInt)
case allowance(Address, Address)
func signature() -> String {
switch self {
case .name:
return "name()"
case .approve(_,_):
return "approve(address,uint256)"
case .totalSupply:
return "totalSupply()"
case .transferFrom(_,_,_):
return "transferFrom(address,address,uint256)"
case .decimals:
return "decimals()"
case .decreaseApproval(_,_):
return "decreaseApproval(address,uint256)"
case .balanceOf(_):
return "balanceOf(address)"
case .symbol:
return "symbol()"
case .transfer(_,_):
return "transfer(address,uint256)"
case .increaseApproval(_,_):
return "increaseApproval(address,uint256)"
case .allowance(_,_):
return "allowance(address,address)"
}
}
func txDataString() -> String {
switch self {
case .name:
return "0x" + sha3(str: signature()).toHexString().prefix(8)
case .approve(let _spender, let _value):
return "0x" + sha3(str: signature()).toHexString().prefix(8) + _spender.hex256bitString + _value.hex256bitString
case .totalSupply:
return "0x" + sha3(str: signature()).toHexString().prefix(8)
case .transferFrom(let _from, let _to, let _value):
return "0x" + sha3(str: signature()).toHexString().prefix(8) + _from.hex256bitString + _to.hex256bitString + _value.hex256bitString
case .decimals:
return "0x" + sha3(str: signature()).toHexString().prefix(8)
case .decreaseApproval(let _spender, let _subtractedValue):
return "0x" + sha3(str: signature()).toHexString().prefix(8) + _spender.hex256bitString + _subtractedValue.hex256bitString
case .balanceOf(let _owner):
return "0x" + sha3(str: signature()).toHexString().prefix(8) + _owner.hex256bitString
case .symbol:
return "0x" + sha3(str: signature()).toHexString().prefix(8)
case .transfer(let _to, let _value):
return "0x" + sha3(str: signature()).toHexString().prefix(8) + _to.hex256bitString + _value.hex256bitString
case .increaseApproval(let _spender, let _addedValue):
return "0x" + sha3(str: signature()).toHexString().prefix(8) + _spender.hex256bitString + _addedValue.hex256bitString
case .allowance(let _owner, let _spender):
return "0x" + sha3(str: signature()).toHexString().prefix(8) + _owner.hex256bitString + _spender.hex256bitString
}
}
func sha3(str: String) -> Data {
let data = Data(bytes: str.bytes)
return data.sha3(.keccak256)
}
}

}
